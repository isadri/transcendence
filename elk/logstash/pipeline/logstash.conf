input {
	file {
		path => "/usr/share/logstash/logs/access.log"
		tags => ["logs"]
	}
	#tcp {
	#	port => "${TCP_PORT}"
	#	ssl_enabled => true
	#	ssl_certificate => "/usr/share/logstash/config/certs/logstash/logstash.crt"
	#	ssl_key => "/usr/share/logstash/config/certs/logstash/logstash.key"
	#	ssl_certificate_authorities => "/usr/share/logstash/config/certs/ca/ca.crt"
	#	codec => "json"
	#	tags => "logs"
	#}
	jdbc {
		jdbc_driver_library => "/usr/share/logstash/jdbc/postgresql-42.7.4.jar"
		jdbc_driver_class => "org.postgresql.Driver"
		jdbc_connection_string => "jdbc:postgresql://postgres:5432/postgres"
		jdbc_user => "${POSTGRES_USER}"
		jdbc_password => "${POSTGRES_PASSWORD}"
		schedule => "* * * * *"
		statement => "SELECT * FROM accounts_user"
		type => "users"
		tags => ["database"]
	}
	jdbc {
		jdbc_driver_library => "/usr/share/logstash/jdbc/postgresql-42.7.4.jar"
		jdbc_driver_class => "org.postgresql.Driver"
		jdbc_connection_string => "jdbc:postgresql://postgres:5432/postgres"
		jdbc_user => "${POSTGRES_USER}"
		jdbc_password => "${POSTGRES_PASSWORD}"
		schedule => "* * * * *"
		statement => "SELECT * FROM friends_friendrequest"
		type => "friend_requests"
		tags => ["database"]
	}
	jdbc {
		jdbc_driver_library => "/usr/share/logstash/jdbc/postgresql-42.7.4.jar"
		jdbc_driver_class => "org.postgresql.Driver"
		jdbc_connection_string => "jdbc:postgresql://postgres:5432/postgres"
		jdbc_user => "${POSTGRES_USER}"
		jdbc_password => "${POSTGRES_PASSWORD}"
		schedule => "* * * * *"
		statement => "SELECT friends_friendlist_friends.id as id, friends_friendlist.user_id as user_id, friends_friendlist_friends.user_id as friend_id from friends_friendlist_friends inner join friends_friendlist on friends_friendlist.id = friends_friendlist_friends.friendlist_id inner join accounts_user on accounts_user.id = friends_friendlist_friends.user_id"
		# select friends_friendlist.user_id as user_id, friends_friendlist_friends.user_id as friend_id from friends_friendlist_friends inner join friends_friendlist on friends_friendlist_friends.friendlist_id = friends_friendlist.id inner join accounts_user on accounts_user.id = friends_friendlist_friends.user_id;
		type => "friends"
		tags => ["database"]
	}
	jdbc {
		jdbc_driver_library => "/usr/share/logstash/jdbc/postgresql-42.7.4.jar"
		jdbc_driver_class => "org.postgresql.Driver"
		jdbc_connection_string => "jdbc:postgresql://postgres:5432/postgres"
		jdbc_user => "${POSTGRES_USER}"
		jdbc_password => "${POSTGRES_PASSWORD}"
		schedule => "* * * * *"
		statement => "SELECT * FROM chat_chat"
		type => "chats"
		tags => ["database"]
	}
	jdbc {
		jdbc_driver_library => "/usr/share/logstash/jdbc/postgresql-42.7.4.jar"
		jdbc_driver_class => "org.postgresql.Driver"
		jdbc_connection_string => "jdbc:postgresql://postgres:5432/postgres"
		jdbc_user => "${POSTGRES_USER}"
		jdbc_password => "${POSTGRES_PASSWORD}"
		schedule => "* * * * *"
		statement => "SELECT * FROM chat_message"
		type => "chat_messages"
		tags => ["database"]
	}
}

filter {
	mutate {
		remove_field => [ "@version" ]
	}
	if "database" in [tags] {
		mutate {
			add_field => {
				"[@metadata][index_name]" => "%{type}"
			}
			remove_field => [ "type" ]
		}
	}
	if "logs" in [tags] {
		grok {
			match => { "message" => "%{IP:client} - %{DATA:remote_user} \[%{HTTPDATE:time_local}\] \"%{WORD:method} %{DATA:url} %{WORD:protocol}/%{NUMBER:http_version}\" %{NUMBER:status_code} %{NUMBER:body_sent} \"%{DATA:referrer}\" \"%{DATA:user_agent}\"" }
		}
	}
}

output {
	if "database" in [tags] {
		elasticsearch {
			hosts => "https://es01:9200"
			user => "elastic"
			password => "${ELASTIC_PASSWORD}"
			index => "%{[@metadata][index_name]}"
			document_id => "%{id}"
			ssl_enabled => true
			ssl_certificate_authorities => "/usr/share/logstash/config/certs/ca/ca.crt"
		}
	}
	if "logs" in [tags] {
		elasticsearch {
			hosts => "https://es01:9200"
			user => "elastic"
			password => "${ELASTIC_PASSWORD}"
			index => "server-logs"
			action => "create"
			#index => "test"
			ssl_enabled => true
			ssl_certificate_authorities => "/usr/share/logstash/config/certs/ca/ca.crt"
		}
	}
}
