networks:
  app-network:

volumes:
  postgres_data:
  modules_files:
  esdata:
  certs:
  kibdata:
  kibconfig:

services:
  back-end:
    container_name: backend
    command: python manage.py runserver 0:8000
    image: backend
    build:
      context: backend
    ports:
      - 8000:8000
    volumes:
      - ./backend/:/code
      - certs:/code/certs
    networks:
      - app-network
    env_file:
      - .env
    depends_on:
      - postgres
    restart: on-failure

  #front-end:
  #  container_name: frontend
  #  image: frontend
  #  build: ./frontend
  #  ports:
  #    - 5000:5000
  #  volumes:
  #    - ./frontend:/code/
  #    - modules_files:/code/node_modules
  #  networks:
  #    - app-network
  #  depends_on:
  #    - back-end
  #  restart: on-failure

  postgres:
    container_name: postgres
    image: postgres:17beta1
    volumes:
      - postgres_data:/var/lib/posgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    env_file:
      - .env
    networks:
      - app-network
    restart: on-failure

  setup:
    build:
      context: ./elk/
      args:
        STACK_VERSION: ${STACK_VERSION}
    container_name: setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    env_file:
      - .env
    user: "0"
    command: bash setup.sh
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.key ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata:/usr/share/elasticsearch/data
      - ./elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    env_file:
      - .env
    networks:
      - app-network
    ports:
      - ${ES_PORT}:9200
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials' "
        ]
      interval: 10s
      timeout: 10s
      retries: 90

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - ./elk/kibana.yml:/usr/share/kibana/config/kibana.yml
    env_file:
      - .env
    ports:
      - ${KIBANA_PORT}:5601
    networks:
      - app-network

  logstash:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash
    command: bin/logstash -f pipeline/logstash.conf --config.reload.automatic
    ports:
      - 5044:5044
    volumes:
      - certs:/usr/share/logstash/config/certs
      - ./elk/logstash/pipeline/:/usr/share/logstash/pipeline/
      - ./elk/logstash/settings/logstash.yml:/usr/share/logstash/config/logstash.yml
    env_file:
      - .env
    networks:
      - app-network
