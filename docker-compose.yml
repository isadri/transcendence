networks:
  app-network:

volumes:
  postgres_data:
  modules_files:
  esdata:
  certs:

services:
  back-end:
    container_name: backend
    command: python manage.py runserver 0:8000
    image: backend
    build:
      context: backend
    ports:
      - 8000:8000
    volumes:
      - ./backend/:/code
    networks:
      - app-network
    env_file:
      - .env
    depends_on:
      - postgres
    restart: on-failure

  #front-end:
  #  container_name: frontend
  #  image: frontend
  #  build: ./frontend
  #  ports:
  #    - 5000:5000
  #  volumes:
  #    - ./frontend:/code/
  #    - modules_files:/code/node_modules
  #  networks:
  #    - app-network
  #  depends_on:
  #    - back-end
  #  restart: on-failure

  postgres:
    container_name: postgres
    image: postgres:17beta1
    volumes:
      - postgres_data:/var/lib/posgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    env_file:
      - .env
    networks:
      - app-network
    restart: on-failure

  setup:
    build:
      context: elk
      args:
        STACK_VERSION: ${STACK_VERSION}
    container_name: setup
    user: "0" # run the container as the root user
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt]" ]
      interval: 1s
      timeout: 5s
      retries: 90

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch
    environment:
      - cluster.name: elk-stack
      - discovery.type=single-node
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.client_authentication=required
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.key=config/certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=config/certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=config/certs/ca/ca.crt
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.license.self_generated.type=${LICENSE}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata:/usr/share/elasticsearch/data
    depends_on:
      setup:
        condition: service_healthy
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      - app-network
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash
    command: bin/logstash -f pipeline/logstash.conf --config.reload.automatic
    stdin_open: true
    tty: true
    ports:
      - 5044:5044
    volumes:
      - ./elk/logstash/pipeline/:/usr/share/logstash/pipeline/
    networks:
      - app-network
